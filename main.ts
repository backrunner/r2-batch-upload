import commander from 'commander';
import chalk from 'chalk';
import path from 'path';
import fs from 'fs';
import { name, version } from './package.json';
import { ERRORS } from './src/constants/errors';
import { checkAndGetConfig } from './src/utils/config';
import { collectFiles } from './src/utils/files';
import { doUpload } from './src/actions/upload';
import { RetryOptions, UploadOptions } from './src/types';
import { readUploadLog, writeUploadLog } from './src/utils/log';

const program = new commander.Command();

program.name(name);
program.version(version);

program
  .argument('<folder>', 'the folder to upload')
  .option('-c, --config <configPath>', 'path to r2 batch upload config file.')
  .option('-l, --limit <limit>', 'limit upload files count (useful for testing)')
  .action(async (folder: string | undefined, options: UploadOptions) => {
    let baseFolderPath;
    if (!folder) {
      console.error(chalk.red('Please specifiy a folder to upload.'));
      return process.exit(ERRORS.INVALID_BASE_FOLDER);
    }
    if (folder.startsWith('/') || folder.includes(':/')) {
      baseFolderPath = path.resolve(folder);
    } else {
      baseFolderPath = path.resolve(process.cwd(), folder);
    }

    // check folder
    if (!fs.existsSync(baseFolderPath)) {
      console.error(chalk.red('Cannot access the folder, please check if the path you have inputed was correct.'));
      return process.exit(ERRORS.INVALID_BASE_FOLDER);
    }
    const baseFolderStat = fs.statSync(baseFolderPath);
    if (!baseFolderStat.isDirectory()) {
      console.error(chalk.red('The specified path is not a folder.'));
      return process.exit(ERRORS.INVALID_BASE_FOLDER);
    }

    // check config
    let r2Config;
    try {
      r2Config = checkAndGetConfig(options.config);
    } catch (err) {
      console.error(chalk.red((err as Error).message));
      return process.exit(ERRORS.GET_CONFIG_FAILED);
    }

    // get files
    let files: string[];
    try {
      files = await collectFiles(baseFolderPath);
    } catch (err) {
      console.error(chalk.red((err as Error).message));
      return process.exit(ERRORS.GET_FILES_FAILED);
    }

    // upload files
    let failed;
    let succeed;
    try {
      const res = await doUpload(baseFolderPath, files, r2Config, options.limit);
      failed = res.failed;
      succeed = res.succeed;
    } catch (err) {
      console.error(chalk.red((err as Error).message));
      return process.exit(ERRORS.GET_FILES_FAILED);
    }

    // finish
    if (!failed?.length) {
      console.log(chalk.green('Files have been uploaded to your Cloudflare R2 bucket :D'));
    } else {
      console.log(chalk.red(`Ooops, some uploading actions failed, please see the log file for more details.`));
    }

    writeUploadLog({ failed, succeed, baseFolderPath, bucket: r2Config.bucket });
  });

program
  .command('retry')
  .argument('<logFilePath>', 'the previous upload log file generated by this tool')
  .option('-c, --config <configPath>', 'path to r2 batch upload config file.')
  .option('-l, --limit <limit>', 'limit upload files count (useful for testing)')
  .action(async (logFilePath: string, options: RetryOptions) => {
    console.log(logFilePath, options, process.argv);
    // check config
    let r2Config;
    try {
      r2Config = checkAndGetConfig(options.config);
    } catch (err) {
      console.error(chalk.red((err as Error).message));
      return process.exit(ERRORS.GET_CONFIG_FAILED);
    }

    const resolvedLogFilePath = path.resolve(logFilePath);
    if (!fs.existsSync(resolvedLogFilePath)) {
      throw new Error('Cannot locate the log file.');
    }

    const logContent = readUploadLog(resolvedLogFilePath);
    if (logContent.bucket && logContent.bucket !== r2Config.bucket) {
      console.error('Bucket in the log file is not the same as the bucket in the config.');
      return process.exit(ERRORS.BUCKET_NOT_SAME);
    }

    const files = logContent.failed.map((item) => item.relativePath);

    // upload files
    let failed;
    let succeed;
    try {
      const res = await doUpload(logContent.baseFolderPath, files, r2Config, options.limit);
      failed = res.failed;
      succeed = res.succeed;
    } catch (err) {
      console.error(chalk.red((err as Error).message));
      return process.exit(ERRORS.GET_FILES_FAILED);
    }

    // finish
    if (!failed?.length) {
      console.log(chalk.green('Files have been uploaded to your Cloudflare R2 bucket :D'));
    } else {
      console.log(chalk.red(`Ooops, some uploading actions failed, please see the log file for more details.`));
    }

    writeUploadLog(
      { failed, succeed, baseFolderPath: logContent.baseFolderPath, bucket: r2Config.bucket, originalLog: logFilePath },
      'retry-log',
    );
  });

program.parse();
